// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !ignore_autogenerated

package converters

import (
	v1alpha1 "github.com/redbackthomson/provider-metronome/apis/ratecard/v1alpha1"
	metronome "github.com/redbackthomson/provider-metronome/internal/clients/metronome"
)

// +k8s:deepcopy-gen=false
type RateCardConverterImpl struct{}

func (c *RateCardConverterImpl) FromRateCard(source *metronome.RateCard) *v1alpha1.ObservedRateCard {
	var pV1alpha1ObservedRateCard *v1alpha1.ObservedRateCard
	if source != nil {
		var v1alpha1ObservedRateCard v1alpha1.ObservedRateCard
		v1alpha1ObservedRateCard.ID = (*source).ID
		v1alpha1ObservedRateCard.Name = (*source).Name
		v1alpha1ObservedRateCard.Description = (*source).Description
		v1alpha1ObservedRateCard.FiatCreditType = c.metronomeFiatCreditTypeToV1alpha1FiatCreditType((*source).FiatCreditType)
		v1alpha1ObservedRateCard.CreatedAt = (*source).CreatedAt
		v1alpha1ObservedRateCard.CreatedBy = (*source).CreatedBy
		if (*source).Aliases != nil {
			v1alpha1ObservedRateCard.Aliases = make([]v1alpha1.RateCardAlias, len((*source).Aliases))
			for i := 0; i < len((*source).Aliases); i++ {
				v1alpha1ObservedRateCard.Aliases[i] = c.metronomeRateCardAliasToV1alpha1RateCardAlias((*source).Aliases[i])
			}
		}
		if (*source).CustomFields != nil {
			v1alpha1ObservedRateCard.CustomFields = make(map[string]string, len((*source).CustomFields))
			for key, value := range (*source).CustomFields {
				v1alpha1ObservedRateCard.CustomFields[key] = value
			}
		}
		pV1alpha1ObservedRateCard = &v1alpha1ObservedRateCard
	}
	return pV1alpha1ObservedRateCard
}
func (c *RateCardConverterImpl) FromRateCardSpec(source *v1alpha1.RateCardParameters) *metronome.CreateRateCardRequest {
	var pMetronomeCreateRateCardRequest *metronome.CreateRateCardRequest
	if source != nil {
		var metronomeCreateRateCardRequest metronome.CreateRateCardRequest
		metronomeCreateRateCardRequest.Name = (*source).Name
		metronomeCreateRateCardRequest.Description = (*source).Description
		metronomeCreateRateCardRequest.FiatCreditTypeID = (*source).FiatCreditTypeID
		if (*source).CreditTypeConversions != nil {
			metronomeCreateRateCardRequest.CreditTypeConversions = make([]metronome.CreditTypeConversion, len((*source).CreditTypeConversions))
			for i := 0; i < len((*source).CreditTypeConversions); i++ {
				metronomeCreateRateCardRequest.CreditTypeConversions[i] = c.v1alpha1CreditTypeConversionToMetronomeCreditTypeConversion((*source).CreditTypeConversions[i])
			}
		}
		if (*source).Aliases != nil {
			metronomeCreateRateCardRequest.Aliases = make([]metronome.RateCardAlias, len((*source).Aliases))
			for j := 0; j < len((*source).Aliases); j++ {
				metronomeCreateRateCardRequest.Aliases[j] = c.v1alpha1RateCardAliasToMetronomeRateCardAlias((*source).Aliases[j])
			}
		}
		if (*source).CustomFields != nil {
			metronomeCreateRateCardRequest.CustomFields = make(map[string]string, len((*source).CustomFields))
			for key, value := range (*source).CustomFields {
				metronomeCreateRateCardRequest.CustomFields[key] = value
			}
		}
		pMetronomeCreateRateCardRequest = &metronomeCreateRateCardRequest
	}
	return pMetronomeCreateRateCardRequest
}
func (c *RateCardConverterImpl) FromRateCardToParameters(source *metronome.RateCard) *v1alpha1.RateCardParameters {
	var pV1alpha1RateCardParameters *v1alpha1.RateCardParameters
	if source != nil {
		var v1alpha1RateCardParameters v1alpha1.RateCardParameters
		v1alpha1RateCardParameters.Name = (*source).Name
		v1alpha1RateCardParameters.Description = (*source).Description
		if (*source).Aliases != nil {
			v1alpha1RateCardParameters.Aliases = make([]v1alpha1.RateCardAlias, len((*source).Aliases))
			for i := 0; i < len((*source).Aliases); i++ {
				v1alpha1RateCardParameters.Aliases[i] = c.metronomeRateCardAliasToV1alpha1RateCardAlias((*source).Aliases[i])
			}
		}
		if (*source).CustomFields != nil {
			v1alpha1RateCardParameters.CustomFields = make(map[string]string, len((*source).CustomFields))
			for key, value := range (*source).CustomFields {
				v1alpha1RateCardParameters.CustomFields[key] = value
			}
		}
		pV1alpha1RateCardParameters = &v1alpha1RateCardParameters
	}
	return pV1alpha1RateCardParameters
}
func (c *RateCardConverterImpl) ToRateCard(source *v1alpha1.ObservedRateCard) *metronome.RateCard {
	var pMetronomeRateCard *metronome.RateCard
	if source != nil {
		var metronomeRateCard metronome.RateCard
		metronomeRateCard.ID = (*source).ID
		metronomeRateCard.Name = (*source).Name
		metronomeRateCard.Description = (*source).Description
		metronomeRateCard.FiatCreditType = c.v1alpha1FiatCreditTypeToMetronomeFiatCreditType((*source).FiatCreditType)
		metronomeRateCard.CreatedAt = (*source).CreatedAt
		metronomeRateCard.CreatedBy = (*source).CreatedBy
		if (*source).Aliases != nil {
			metronomeRateCard.Aliases = make([]metronome.RateCardAlias, len((*source).Aliases))
			for i := 0; i < len((*source).Aliases); i++ {
				metronomeRateCard.Aliases[i] = c.v1alpha1RateCardAliasToMetronomeRateCardAlias((*source).Aliases[i])
			}
		}
		if (*source).CustomFields != nil {
			metronomeRateCard.CustomFields = make(map[string]string, len((*source).CustomFields))
			for key, value := range (*source).CustomFields {
				metronomeRateCard.CustomFields[key] = value
			}
		}
		pMetronomeRateCard = &metronomeRateCard
	}
	return pMetronomeRateCard
}
func (c *RateCardConverterImpl) ToRateCardSpec(source *metronome.CreateRateCardRequest) *v1alpha1.RateCardParameters {
	var pV1alpha1RateCardParameters *v1alpha1.RateCardParameters
	if source != nil {
		var v1alpha1RateCardParameters v1alpha1.RateCardParameters
		v1alpha1RateCardParameters.Name = (*source).Name
		v1alpha1RateCardParameters.Description = (*source).Description
		v1alpha1RateCardParameters.FiatCreditTypeID = (*source).FiatCreditTypeID
		if (*source).CreditTypeConversions != nil {
			v1alpha1RateCardParameters.CreditTypeConversions = make([]v1alpha1.CreditTypeConversion, len((*source).CreditTypeConversions))
			for i := 0; i < len((*source).CreditTypeConversions); i++ {
				v1alpha1RateCardParameters.CreditTypeConversions[i] = c.metronomeCreditTypeConversionToV1alpha1CreditTypeConversion((*source).CreditTypeConversions[i])
			}
		}
		if (*source).Aliases != nil {
			v1alpha1RateCardParameters.Aliases = make([]v1alpha1.RateCardAlias, len((*source).Aliases))
			for j := 0; j < len((*source).Aliases); j++ {
				v1alpha1RateCardParameters.Aliases[j] = c.metronomeRateCardAliasToV1alpha1RateCardAlias((*source).Aliases[j])
			}
		}
		if (*source).CustomFields != nil {
			v1alpha1RateCardParameters.CustomFields = make(map[string]string, len((*source).CustomFields))
			for key, value := range (*source).CustomFields {
				v1alpha1RateCardParameters.CustomFields[key] = value
			}
		}
		pV1alpha1RateCardParameters = &v1alpha1RateCardParameters
	}
	return pV1alpha1RateCardParameters
}
func (c *RateCardConverterImpl) metronomeCreditTypeConversionToV1alpha1CreditTypeConversion(source metronome.CreditTypeConversion) v1alpha1.CreditTypeConversion {
	var v1alpha1CreditTypeConversion v1alpha1.CreditTypeConversion
	v1alpha1CreditTypeConversion.CustomCreditTypeID = source.CustomCreditTypeID
	v1alpha1CreditTypeConversion.FiatPerCustomCredit = source.FiatPerCustomCredit
	return v1alpha1CreditTypeConversion
}
func (c *RateCardConverterImpl) metronomeFiatCreditTypeToV1alpha1FiatCreditType(source metronome.FiatCreditType) v1alpha1.FiatCreditType {
	var v1alpha1FiatCreditType v1alpha1.FiatCreditType
	v1alpha1FiatCreditType.ID = source.ID
	v1alpha1FiatCreditType.Name = source.Name
	return v1alpha1FiatCreditType
}
func (c *RateCardConverterImpl) metronomeRateCardAliasToV1alpha1RateCardAlias(source metronome.RateCardAlias) v1alpha1.RateCardAlias {
	var v1alpha1RateCardAlias v1alpha1.RateCardAlias
	v1alpha1RateCardAlias.Name = source.Name
	return v1alpha1RateCardAlias
}
func (c *RateCardConverterImpl) v1alpha1CreditTypeConversionToMetronomeCreditTypeConversion(source v1alpha1.CreditTypeConversion) metronome.CreditTypeConversion {
	var metronomeCreditTypeConversion metronome.CreditTypeConversion
	metronomeCreditTypeConversion.CustomCreditTypeID = source.CustomCreditTypeID
	metronomeCreditTypeConversion.FiatPerCustomCredit = source.FiatPerCustomCredit
	return metronomeCreditTypeConversion
}
func (c *RateCardConverterImpl) v1alpha1FiatCreditTypeToMetronomeFiatCreditType(source v1alpha1.FiatCreditType) metronome.FiatCreditType {
	var metronomeFiatCreditType metronome.FiatCreditType
	metronomeFiatCreditType.ID = source.ID
	metronomeFiatCreditType.Name = source.Name
	return metronomeFiatCreditType
}
func (c *RateCardConverterImpl) v1alpha1RateCardAliasToMetronomeRateCardAlias(source v1alpha1.RateCardAlias) metronome.RateCardAlias {
	var metronomeRateCardAlias metronome.RateCardAlias
	metronomeRateCardAlias.Name = source.Name
	return metronomeRateCardAlias
}
