// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !ignore_autogenerated

package converters

import (
	v1alpha1 "github.com/redbackthomson/provider-metronome/apis/product/v1alpha1"
	metronome "github.com/redbackthomson/provider-metronome/internal/clients/metronome"
)

// +k8s:deepcopy-gen=false
type ProductConverterImpl struct{}

func (c *ProductConverterImpl) FromProduct(source *metronome.Product) *v1alpha1.ObservedProduct {
	var pV1alpha1ObservedProduct *v1alpha1.ObservedProduct
	if source != nil {
		var v1alpha1ObservedProduct v1alpha1.ObservedProduct
		v1alpha1ObservedProduct.ID = (*source).ID
		v1alpha1ObservedProduct.Type = (*source).Type
		v1alpha1ObservedProduct.Initial = c.metronomeProductDetailsToV1alpha1ProductDetails((*source).Initial)
		v1alpha1ObservedProduct.Current = c.metronomeProductDetailsToV1alpha1ProductDetails((*source).Current)
		if (*source).Updates != nil {
			v1alpha1ObservedProduct.Updates = make([]v1alpha1.ProductDetails, len((*source).Updates))
			for i := 0; i < len((*source).Updates); i++ {
				v1alpha1ObservedProduct.Updates[i] = c.metronomeProductDetailsToV1alpha1ProductDetails((*source).Updates[i])
			}
		}
		if (*source).CustomFields != nil {
			v1alpha1ObservedProduct.CustomFields = make(map[string]string, len((*source).CustomFields))
			for key, value := range (*source).CustomFields {
				v1alpha1ObservedProduct.CustomFields[key] = value
			}
		}
		v1alpha1ObservedProduct.ArchivedAt = (*source).ArchivedAt
		pV1alpha1ObservedProduct = &v1alpha1ObservedProduct
	}
	return pV1alpha1ObservedProduct
}
func (c *ProductConverterImpl) FromProductSpec(source *v1alpha1.ProductParameters) *metronome.CreateProductRequest {
	var pMetronomeCreateProductRequest *metronome.CreateProductRequest
	if source != nil {
		var metronomeCreateProductRequest metronome.CreateProductRequest
		metronomeCreateProductRequest.Name = (*source).Name
		metronomeCreateProductRequest.Type = (*source).Type
		metronomeCreateProductRequest.BillableMetricID = (*source).BillableMetricID
		if (*source).CompositeProductIDs != nil {
			metronomeCreateProductRequest.CompositeProductIDs = make([]string, len((*source).CompositeProductIDs))
			for i := 0; i < len((*source).CompositeProductIDs); i++ {
				metronomeCreateProductRequest.CompositeProductIDs[i] = (*source).CompositeProductIDs[i]
			}
		}
		if (*source).CompositeTags != nil {
			metronomeCreateProductRequest.CompositeTags = make([]string, len((*source).CompositeTags))
			for j := 0; j < len((*source).CompositeTags); j++ {
				metronomeCreateProductRequest.CompositeTags[j] = (*source).CompositeTags[j]
			}
		}
		metronomeCreateProductRequest.ExcludeFreeUsage = (*source).ExcludeFreeUsage
		if (*source).PresentationGroupKey != nil {
			metronomeCreateProductRequest.PresentationGroupKey = make([]string, len((*source).PresentationGroupKey))
			for k := 0; k < len((*source).PresentationGroupKey); k++ {
				metronomeCreateProductRequest.PresentationGroupKey[k] = (*source).PresentationGroupKey[k]
			}
		}
		if (*source).PricingGroupKey != nil {
			metronomeCreateProductRequest.PricingGroupKey = make([]string, len((*source).PricingGroupKey))
			for l := 0; l < len((*source).PricingGroupKey); l++ {
				metronomeCreateProductRequest.PricingGroupKey[l] = (*source).PricingGroupKey[l]
			}
		}
		metronomeCreateProductRequest.QuantityConversion = c.pV1alpha1QuantityConversionToPMetronomeQuantityConversion((*source).QuantityConversion)
		metronomeCreateProductRequest.QuantityRounding = c.pV1alpha1QuantityRoundingToPMetronomeQuantityRounding((*source).QuantityRounding)
		if (*source).Tags != nil {
			metronomeCreateProductRequest.Tags = make([]string, len((*source).Tags))
			for m := 0; m < len((*source).Tags); m++ {
				metronomeCreateProductRequest.Tags[m] = (*source).Tags[m]
			}
		}
		pMetronomeCreateProductRequest = &metronomeCreateProductRequest
	}
	return pMetronomeCreateProductRequest
}
func (c *ProductConverterImpl) FromProductToParameters(source *metronome.Product) *v1alpha1.ProductParameters {
	var pV1alpha1ProductParameters *v1alpha1.ProductParameters
	if source != nil {
		var v1alpha1ProductParameters v1alpha1.ProductParameters
		v1alpha1ProductParameters.Type = (*source).Type
		pV1alpha1ProductParameters = &v1alpha1ProductParameters
	}
	return pV1alpha1ProductParameters
}
func (c *ProductConverterImpl) ToProduct(source *v1alpha1.ObservedProduct) *metronome.Product {
	var pMetronomeProduct *metronome.Product
	if source != nil {
		var metronomeProduct metronome.Product
		metronomeProduct.ID = (*source).ID
		metronomeProduct.Type = (*source).Type
		metronomeProduct.Initial = c.v1alpha1ProductDetailsToMetronomeProductDetails((*source).Initial)
		metronomeProduct.Current = c.v1alpha1ProductDetailsToMetronomeProductDetails((*source).Current)
		if (*source).Updates != nil {
			metronomeProduct.Updates = make([]metronome.ProductDetails, len((*source).Updates))
			for i := 0; i < len((*source).Updates); i++ {
				metronomeProduct.Updates[i] = c.v1alpha1ProductDetailsToMetronomeProductDetails((*source).Updates[i])
			}
		}
		if (*source).CustomFields != nil {
			metronomeProduct.CustomFields = make(map[string]string, len((*source).CustomFields))
			for key, value := range (*source).CustomFields {
				metronomeProduct.CustomFields[key] = value
			}
		}
		metronomeProduct.ArchivedAt = (*source).ArchivedAt
		pMetronomeProduct = &metronomeProduct
	}
	return pMetronomeProduct
}
func (c *ProductConverterImpl) ToProductSpec(source *metronome.CreateProductRequest) *v1alpha1.ProductParameters {
	var pV1alpha1ProductParameters *v1alpha1.ProductParameters
	if source != nil {
		var v1alpha1ProductParameters v1alpha1.ProductParameters
		v1alpha1ProductParameters.BillableMetricID = (*source).BillableMetricID
		v1alpha1ProductParameters.Name = (*source).Name
		v1alpha1ProductParameters.Type = (*source).Type
		if (*source).CompositeProductIDs != nil {
			v1alpha1ProductParameters.CompositeProductIDs = make([]string, len((*source).CompositeProductIDs))
			for i := 0; i < len((*source).CompositeProductIDs); i++ {
				v1alpha1ProductParameters.CompositeProductIDs[i] = (*source).CompositeProductIDs[i]
			}
		}
		if (*source).CompositeTags != nil {
			v1alpha1ProductParameters.CompositeTags = make([]string, len((*source).CompositeTags))
			for j := 0; j < len((*source).CompositeTags); j++ {
				v1alpha1ProductParameters.CompositeTags[j] = (*source).CompositeTags[j]
			}
		}
		v1alpha1ProductParameters.ExcludeFreeUsage = (*source).ExcludeFreeUsage
		if (*source).PresentationGroupKey != nil {
			v1alpha1ProductParameters.PresentationGroupKey = make([]string, len((*source).PresentationGroupKey))
			for k := 0; k < len((*source).PresentationGroupKey); k++ {
				v1alpha1ProductParameters.PresentationGroupKey[k] = (*source).PresentationGroupKey[k]
			}
		}
		if (*source).PricingGroupKey != nil {
			v1alpha1ProductParameters.PricingGroupKey = make([]string, len((*source).PricingGroupKey))
			for l := 0; l < len((*source).PricingGroupKey); l++ {
				v1alpha1ProductParameters.PricingGroupKey[l] = (*source).PricingGroupKey[l]
			}
		}
		v1alpha1ProductParameters.QuantityConversion = c.pMetronomeQuantityConversionToPV1alpha1QuantityConversion((*source).QuantityConversion)
		v1alpha1ProductParameters.QuantityRounding = c.pMetronomeQuantityRoundingToPV1alpha1QuantityRounding((*source).QuantityRounding)
		if (*source).Tags != nil {
			v1alpha1ProductParameters.Tags = make([]string, len((*source).Tags))
			for m := 0; m < len((*source).Tags); m++ {
				v1alpha1ProductParameters.Tags[m] = (*source).Tags[m]
			}
		}
		pV1alpha1ProductParameters = &v1alpha1ProductParameters
	}
	return pV1alpha1ProductParameters
}
func (c *ProductConverterImpl) metronomeProductDetailsToV1alpha1ProductDetails(source metronome.ProductDetails) v1alpha1.ProductDetails {
	var v1alpha1ProductDetails v1alpha1.ProductDetails
	v1alpha1ProductDetails.Name = source.Name
	v1alpha1ProductDetails.StartingAt = source.StartingAt
	if source.CompositeProductIDs != nil {
		v1alpha1ProductDetails.CompositeProductIDs = make([]string, len(source.CompositeProductIDs))
		for i := 0; i < len(source.CompositeProductIDs); i++ {
			v1alpha1ProductDetails.CompositeProductIDs[i] = source.CompositeProductIDs[i]
		}
	}
	if source.CompositeTags != nil {
		v1alpha1ProductDetails.CompositeTags = make([]string, len(source.CompositeTags))
		for j := 0; j < len(source.CompositeTags); j++ {
			v1alpha1ProductDetails.CompositeTags[j] = source.CompositeTags[j]
		}
	}
	v1alpha1ProductDetails.ExcludeFreeUsage = source.ExcludeFreeUsage
	if source.PresentationGroupKey != nil {
		v1alpha1ProductDetails.PresentationGroupKey = make([]string, len(source.PresentationGroupKey))
		for k := 0; k < len(source.PresentationGroupKey); k++ {
			v1alpha1ProductDetails.PresentationGroupKey[k] = source.PresentationGroupKey[k]
		}
	}
	if source.PricingGroupKey != nil {
		v1alpha1ProductDetails.PricingGroupKey = make([]string, len(source.PricingGroupKey))
		for l := 0; l < len(source.PricingGroupKey); l++ {
			v1alpha1ProductDetails.PricingGroupKey[l] = source.PricingGroupKey[l]
		}
	}
	v1alpha1ProductDetails.QuantityConversion = c.pMetronomeQuantityConversionToPV1alpha1QuantityConversion(source.QuantityConversion)
	v1alpha1ProductDetails.QuantityRounding = c.pMetronomeQuantityRoundingToPV1alpha1QuantityRounding(source.QuantityRounding)
	if source.Tags != nil {
		v1alpha1ProductDetails.Tags = make([]string, len(source.Tags))
		for m := 0; m < len(source.Tags); m++ {
			v1alpha1ProductDetails.Tags[m] = source.Tags[m]
		}
	}
	v1alpha1ProductDetails.CreatedAt = source.CreatedAt
	v1alpha1ProductDetails.CreatedBy = source.CreatedBy
	v1alpha1ProductDetails.BillableMetricID = source.BillableMetricID
	return v1alpha1ProductDetails
}
func (c *ProductConverterImpl) pMetronomeQuantityConversionToPV1alpha1QuantityConversion(source *metronome.QuantityConversion) *v1alpha1.QuantityConversion {
	var pV1alpha1QuantityConversion *v1alpha1.QuantityConversion
	if source != nil {
		var v1alpha1QuantityConversion v1alpha1.QuantityConversion
		v1alpha1QuantityConversion.ConversionFactor = (*source).ConversionFactor
		v1alpha1QuantityConversion.Operation = (*source).Operation
		v1alpha1QuantityConversion.Name = (*source).Name
		pV1alpha1QuantityConversion = &v1alpha1QuantityConversion
	}
	return pV1alpha1QuantityConversion
}
func (c *ProductConverterImpl) pMetronomeQuantityRoundingToPV1alpha1QuantityRounding(source *metronome.QuantityRounding) *v1alpha1.QuantityRounding {
	var pV1alpha1QuantityRounding *v1alpha1.QuantityRounding
	if source != nil {
		var v1alpha1QuantityRounding v1alpha1.QuantityRounding
		v1alpha1QuantityRounding.DecimalPlaces = (*source).DecimalPlaces
		v1alpha1QuantityRounding.RoundingMethod = (*source).RoundingMethod
		pV1alpha1QuantityRounding = &v1alpha1QuantityRounding
	}
	return pV1alpha1QuantityRounding
}
func (c *ProductConverterImpl) pV1alpha1QuantityConversionToPMetronomeQuantityConversion(source *v1alpha1.QuantityConversion) *metronome.QuantityConversion {
	var pMetronomeQuantityConversion *metronome.QuantityConversion
	if source != nil {
		var metronomeQuantityConversion metronome.QuantityConversion
		metronomeQuantityConversion.ConversionFactor = (*source).ConversionFactor
		metronomeQuantityConversion.Operation = (*source).Operation
		metronomeQuantityConversion.Name = (*source).Name
		pMetronomeQuantityConversion = &metronomeQuantityConversion
	}
	return pMetronomeQuantityConversion
}
func (c *ProductConverterImpl) pV1alpha1QuantityRoundingToPMetronomeQuantityRounding(source *v1alpha1.QuantityRounding) *metronome.QuantityRounding {
	var pMetronomeQuantityRounding *metronome.QuantityRounding
	if source != nil {
		var metronomeQuantityRounding metronome.QuantityRounding
		metronomeQuantityRounding.DecimalPlaces = (*source).DecimalPlaces
		metronomeQuantityRounding.RoundingMethod = (*source).RoundingMethod
		pMetronomeQuantityRounding = &metronomeQuantityRounding
	}
	return pMetronomeQuantityRounding
}
func (c *ProductConverterImpl) v1alpha1ProductDetailsToMetronomeProductDetails(source v1alpha1.ProductDetails) metronome.ProductDetails {
	var metronomeProductDetails metronome.ProductDetails
	metronomeProductDetails.Name = source.Name
	metronomeProductDetails.StartingAt = source.StartingAt
	if source.CompositeProductIDs != nil {
		metronomeProductDetails.CompositeProductIDs = make([]string, len(source.CompositeProductIDs))
		for i := 0; i < len(source.CompositeProductIDs); i++ {
			metronomeProductDetails.CompositeProductIDs[i] = source.CompositeProductIDs[i]
		}
	}
	if source.CompositeTags != nil {
		metronomeProductDetails.CompositeTags = make([]string, len(source.CompositeTags))
		for j := 0; j < len(source.CompositeTags); j++ {
			metronomeProductDetails.CompositeTags[j] = source.CompositeTags[j]
		}
	}
	metronomeProductDetails.ExcludeFreeUsage = source.ExcludeFreeUsage
	if source.PresentationGroupKey != nil {
		metronomeProductDetails.PresentationGroupKey = make([]string, len(source.PresentationGroupKey))
		for k := 0; k < len(source.PresentationGroupKey); k++ {
			metronomeProductDetails.PresentationGroupKey[k] = source.PresentationGroupKey[k]
		}
	}
	if source.PricingGroupKey != nil {
		metronomeProductDetails.PricingGroupKey = make([]string, len(source.PricingGroupKey))
		for l := 0; l < len(source.PricingGroupKey); l++ {
			metronomeProductDetails.PricingGroupKey[l] = source.PricingGroupKey[l]
		}
	}
	metronomeProductDetails.QuantityConversion = c.pV1alpha1QuantityConversionToPMetronomeQuantityConversion(source.QuantityConversion)
	metronomeProductDetails.QuantityRounding = c.pV1alpha1QuantityRoundingToPMetronomeQuantityRounding(source.QuantityRounding)
	if source.Tags != nil {
		metronomeProductDetails.Tags = make([]string, len(source.Tags))
		for m := 0; m < len(source.Tags); m++ {
			metronomeProductDetails.Tags[m] = source.Tags[m]
		}
	}
	metronomeProductDetails.CreatedAt = source.CreatedAt
	metronomeProductDetails.CreatedBy = source.CreatedBy
	metronomeProductDetails.BillableMetricID = source.BillableMetricID
	return metronomeProductDetails
}
