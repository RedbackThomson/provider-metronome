// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !ignore_autogenerated

package converters

import (
	v1alpha1 "github.com/redbackthomson/provider-metronome/apis/billablemetric/v1alpha1"
	metronome "github.com/redbackthomson/provider-metronome/internal/clients/metronome"
)

// +k8s:deepcopy-gen=false
type BillableMetricConverterImpl struct{}

func (c *BillableMetricConverterImpl) FromBillableMetric(source *metronome.BillableMetric) *v1alpha1.ObservedBillableMetric {
	var pV1alpha1ObservedBillableMetric *v1alpha1.ObservedBillableMetric
	if source != nil {
		var v1alpha1ObservedBillableMetric v1alpha1.ObservedBillableMetric
		v1alpha1ObservedBillableMetric.ID = (*source).ID
		v1alpha1ObservedBillableMetric.Name = (*source).Name
		v1alpha1ObservedBillableMetric.AggregationType = v1alpha1.AggregationType((*source).AggregationType)
		v1alpha1ObservedBillableMetric.AggregationKey = (*source).AggregationKey
		v1alpha1ObservedBillableMetric.EventTypeFilter = c.metronomeEventTypeFilterToV1alpha1EventTypeFilter((*source).EventTypeFilter)
		if (*source).PropertyFilters != nil {
			v1alpha1ObservedBillableMetric.PropertyFilters = make([]v1alpha1.PropertyFilter, len((*source).PropertyFilters))
			for i := 0; i < len((*source).PropertyFilters); i++ {
				v1alpha1ObservedBillableMetric.PropertyFilters[i] = c.metronomePropertyFilterToV1alpha1PropertyFilter((*source).PropertyFilters[i])
			}
		}
		if (*source).GroupKeys != nil {
			v1alpha1ObservedBillableMetric.GroupKeys = make([][]string, len((*source).GroupKeys))
			for j := 0; j < len((*source).GroupKeys); j++ {
				if (*source).GroupKeys[j] != nil {
					v1alpha1ObservedBillableMetric.GroupKeys[j] = make([]string, len((*source).GroupKeys[j]))
					for k := 0; k < len((*source).GroupKeys[j]); k++ {
						v1alpha1ObservedBillableMetric.GroupKeys[j][k] = (*source).GroupKeys[j][k]
					}
				}
			}
		}
		if (*source).CustomFields != nil {
			v1alpha1ObservedBillableMetric.CustomFields = make(map[string]string, len((*source).CustomFields))
			for key, value := range (*source).CustomFields {
				v1alpha1ObservedBillableMetric.CustomFields[key] = value
			}
		}
		v1alpha1ObservedBillableMetric.SQL = (*source).SQL
		v1alpha1ObservedBillableMetric.ArchivedAt = (*source).ArchivedAt
		pV1alpha1ObservedBillableMetric = &v1alpha1ObservedBillableMetric
	}
	return pV1alpha1ObservedBillableMetric
}
func (c *BillableMetricConverterImpl) FromBillableMetricSpec(source *v1alpha1.BillableMetricParameters) *metronome.CreateBillableMetricRequest {
	var pMetronomeCreateBillableMetricRequest *metronome.CreateBillableMetricRequest
	if source != nil {
		var metronomeCreateBillableMetricRequest metronome.CreateBillableMetricRequest
		metronomeCreateBillableMetricRequest.Name = (*source).Name
		metronomeCreateBillableMetricRequest.AggregationType = metronome.AggregationType((*source).AggregationType)
		metronomeCreateBillableMetricRequest.AggregationKey = (*source).AggregationKey
		metronomeCreateBillableMetricRequest.EventTypeFilter = c.v1alpha1EventTypeFilterToMetronomeEventTypeFilter((*source).EventTypeFilter)
		if (*source).PropertyFilters != nil {
			metronomeCreateBillableMetricRequest.PropertyFilters = make([]metronome.PropertyFilter, len((*source).PropertyFilters))
			for i := 0; i < len((*source).PropertyFilters); i++ {
				metronomeCreateBillableMetricRequest.PropertyFilters[i] = c.v1alpha1PropertyFilterToMetronomePropertyFilter((*source).PropertyFilters[i])
			}
		}
		if (*source).GroupKeys != nil {
			metronomeCreateBillableMetricRequest.GroupKeys = make([][]string, len((*source).GroupKeys))
			for j := 0; j < len((*source).GroupKeys); j++ {
				if (*source).GroupKeys[j] != nil {
					metronomeCreateBillableMetricRequest.GroupKeys[j] = make([]string, len((*source).GroupKeys[j]))
					for k := 0; k < len((*source).GroupKeys[j]); k++ {
						metronomeCreateBillableMetricRequest.GroupKeys[j][k] = (*source).GroupKeys[j][k]
					}
				}
			}
		}
		if (*source).CustomFields != nil {
			metronomeCreateBillableMetricRequest.CustomFields = make(map[string]string, len((*source).CustomFields))
			for key, value := range (*source).CustomFields {
				metronomeCreateBillableMetricRequest.CustomFields[key] = value
			}
		}
		metronomeCreateBillableMetricRequest.SQL = (*source).SQL
		pMetronomeCreateBillableMetricRequest = &metronomeCreateBillableMetricRequest
	}
	return pMetronomeCreateBillableMetricRequest
}
func (c *BillableMetricConverterImpl) FromBillableMetricToParameters(source *metronome.BillableMetric) *v1alpha1.BillableMetricParameters {
	var pV1alpha1BillableMetricParameters *v1alpha1.BillableMetricParameters
	if source != nil {
		var v1alpha1BillableMetricParameters v1alpha1.BillableMetricParameters
		v1alpha1BillableMetricParameters.Name = (*source).Name
		v1alpha1BillableMetricParameters.AggregationType = v1alpha1.AggregationType((*source).AggregationType)
		v1alpha1BillableMetricParameters.AggregationKey = (*source).AggregationKey
		v1alpha1BillableMetricParameters.EventTypeFilter = c.metronomeEventTypeFilterToV1alpha1EventTypeFilter((*source).EventTypeFilter)
		if (*source).PropertyFilters != nil {
			v1alpha1BillableMetricParameters.PropertyFilters = make([]v1alpha1.PropertyFilter, len((*source).PropertyFilters))
			for i := 0; i < len((*source).PropertyFilters); i++ {
				v1alpha1BillableMetricParameters.PropertyFilters[i] = c.metronomePropertyFilterToV1alpha1PropertyFilter((*source).PropertyFilters[i])
			}
		}
		if (*source).GroupKeys != nil {
			v1alpha1BillableMetricParameters.GroupKeys = make([][]string, len((*source).GroupKeys))
			for j := 0; j < len((*source).GroupKeys); j++ {
				if (*source).GroupKeys[j] != nil {
					v1alpha1BillableMetricParameters.GroupKeys[j] = make([]string, len((*source).GroupKeys[j]))
					for k := 0; k < len((*source).GroupKeys[j]); k++ {
						v1alpha1BillableMetricParameters.GroupKeys[j][k] = (*source).GroupKeys[j][k]
					}
				}
			}
		}
		if (*source).CustomFields != nil {
			v1alpha1BillableMetricParameters.CustomFields = make(map[string]string, len((*source).CustomFields))
			for key, value := range (*source).CustomFields {
				v1alpha1BillableMetricParameters.CustomFields[key] = value
			}
		}
		v1alpha1BillableMetricParameters.SQL = (*source).SQL
		pV1alpha1BillableMetricParameters = &v1alpha1BillableMetricParameters
	}
	return pV1alpha1BillableMetricParameters
}
func (c *BillableMetricConverterImpl) ToBillableMetric(source *v1alpha1.ObservedBillableMetric) *metronome.BillableMetric {
	var pMetronomeBillableMetric *metronome.BillableMetric
	if source != nil {
		var metronomeBillableMetric metronome.BillableMetric
		metronomeBillableMetric.ID = (*source).ID
		metronomeBillableMetric.Name = (*source).Name
		metronomeBillableMetric.AggregationType = metronome.AggregationType((*source).AggregationType)
		metronomeBillableMetric.AggregationKey = (*source).AggregationKey
		metronomeBillableMetric.EventTypeFilter = c.v1alpha1EventTypeFilterToMetronomeEventTypeFilter((*source).EventTypeFilter)
		if (*source).PropertyFilters != nil {
			metronomeBillableMetric.PropertyFilters = make([]metronome.PropertyFilter, len((*source).PropertyFilters))
			for i := 0; i < len((*source).PropertyFilters); i++ {
				metronomeBillableMetric.PropertyFilters[i] = c.v1alpha1PropertyFilterToMetronomePropertyFilter((*source).PropertyFilters[i])
			}
		}
		if (*source).GroupKeys != nil {
			metronomeBillableMetric.GroupKeys = make([][]string, len((*source).GroupKeys))
			for j := 0; j < len((*source).GroupKeys); j++ {
				if (*source).GroupKeys[j] != nil {
					metronomeBillableMetric.GroupKeys[j] = make([]string, len((*source).GroupKeys[j]))
					for k := 0; k < len((*source).GroupKeys[j]); k++ {
						metronomeBillableMetric.GroupKeys[j][k] = (*source).GroupKeys[j][k]
					}
				}
			}
		}
		if (*source).CustomFields != nil {
			metronomeBillableMetric.CustomFields = make(map[string]string, len((*source).CustomFields))
			for key, value := range (*source).CustomFields {
				metronomeBillableMetric.CustomFields[key] = value
			}
		}
		metronomeBillableMetric.SQL = (*source).SQL
		metronomeBillableMetric.ArchivedAt = (*source).ArchivedAt
		pMetronomeBillableMetric = &metronomeBillableMetric
	}
	return pMetronomeBillableMetric
}
func (c *BillableMetricConverterImpl) ToBillableMetricSpec(source *metronome.CreateBillableMetricRequest) *v1alpha1.BillableMetricParameters {
	var pV1alpha1BillableMetricParameters *v1alpha1.BillableMetricParameters
	if source != nil {
		var v1alpha1BillableMetricParameters v1alpha1.BillableMetricParameters
		v1alpha1BillableMetricParameters.Name = (*source).Name
		v1alpha1BillableMetricParameters.AggregationType = v1alpha1.AggregationType((*source).AggregationType)
		v1alpha1BillableMetricParameters.AggregationKey = (*source).AggregationKey
		v1alpha1BillableMetricParameters.EventTypeFilter = c.metronomeEventTypeFilterToV1alpha1EventTypeFilter((*source).EventTypeFilter)
		if (*source).PropertyFilters != nil {
			v1alpha1BillableMetricParameters.PropertyFilters = make([]v1alpha1.PropertyFilter, len((*source).PropertyFilters))
			for i := 0; i < len((*source).PropertyFilters); i++ {
				v1alpha1BillableMetricParameters.PropertyFilters[i] = c.metronomePropertyFilterToV1alpha1PropertyFilter((*source).PropertyFilters[i])
			}
		}
		if (*source).GroupKeys != nil {
			v1alpha1BillableMetricParameters.GroupKeys = make([][]string, len((*source).GroupKeys))
			for j := 0; j < len((*source).GroupKeys); j++ {
				if (*source).GroupKeys[j] != nil {
					v1alpha1BillableMetricParameters.GroupKeys[j] = make([]string, len((*source).GroupKeys[j]))
					for k := 0; k < len((*source).GroupKeys[j]); k++ {
						v1alpha1BillableMetricParameters.GroupKeys[j][k] = (*source).GroupKeys[j][k]
					}
				}
			}
		}
		if (*source).CustomFields != nil {
			v1alpha1BillableMetricParameters.CustomFields = make(map[string]string, len((*source).CustomFields))
			for key, value := range (*source).CustomFields {
				v1alpha1BillableMetricParameters.CustomFields[key] = value
			}
		}
		v1alpha1BillableMetricParameters.SQL = (*source).SQL
		pV1alpha1BillableMetricParameters = &v1alpha1BillableMetricParameters
	}
	return pV1alpha1BillableMetricParameters
}
func (c *BillableMetricConverterImpl) metronomeEventTypeFilterToV1alpha1EventTypeFilter(source metronome.EventTypeFilter) v1alpha1.EventTypeFilter {
	var v1alpha1EventTypeFilter v1alpha1.EventTypeFilter
	if source.InValues != nil {
		v1alpha1EventTypeFilter.InValues = make([]string, len(source.InValues))
		for i := 0; i < len(source.InValues); i++ {
			v1alpha1EventTypeFilter.InValues[i] = source.InValues[i]
		}
	}
	if source.NotInValues != nil {
		v1alpha1EventTypeFilter.NotInValues = make([]string, len(source.NotInValues))
		for j := 0; j < len(source.NotInValues); j++ {
			v1alpha1EventTypeFilter.NotInValues[j] = source.NotInValues[j]
		}
	}
	return v1alpha1EventTypeFilter
}
func (c *BillableMetricConverterImpl) metronomePropertyFilterToV1alpha1PropertyFilter(source metronome.PropertyFilter) v1alpha1.PropertyFilter {
	var v1alpha1PropertyFilter v1alpha1.PropertyFilter
	v1alpha1PropertyFilter.Name = source.Name
	if source.Exists != nil {
		xbool := *source.Exists
		v1alpha1PropertyFilter.Exists = &xbool
	}
	if source.InValues != nil {
		v1alpha1PropertyFilter.InValues = make([]string, len(source.InValues))
		for i := 0; i < len(source.InValues); i++ {
			v1alpha1PropertyFilter.InValues[i] = source.InValues[i]
		}
	}
	if source.NotInValues != nil {
		v1alpha1PropertyFilter.NotInValues = make([]string, len(source.NotInValues))
		for j := 0; j < len(source.NotInValues); j++ {
			v1alpha1PropertyFilter.NotInValues[j] = source.NotInValues[j]
		}
	}
	return v1alpha1PropertyFilter
}
func (c *BillableMetricConverterImpl) v1alpha1EventTypeFilterToMetronomeEventTypeFilter(source v1alpha1.EventTypeFilter) metronome.EventTypeFilter {
	var metronomeEventTypeFilter metronome.EventTypeFilter
	if source.InValues != nil {
		metronomeEventTypeFilter.InValues = make([]string, len(source.InValues))
		for i := 0; i < len(source.InValues); i++ {
			metronomeEventTypeFilter.InValues[i] = source.InValues[i]
		}
	}
	if source.NotInValues != nil {
		metronomeEventTypeFilter.NotInValues = make([]string, len(source.NotInValues))
		for j := 0; j < len(source.NotInValues); j++ {
			metronomeEventTypeFilter.NotInValues[j] = source.NotInValues[j]
		}
	}
	return metronomeEventTypeFilter
}
func (c *BillableMetricConverterImpl) v1alpha1PropertyFilterToMetronomePropertyFilter(source v1alpha1.PropertyFilter) metronome.PropertyFilter {
	var metronomePropertyFilter metronome.PropertyFilter
	metronomePropertyFilter.Name = source.Name
	if source.Exists != nil {
		xbool := *source.Exists
		metronomePropertyFilter.Exists = &xbool
	}
	if source.InValues != nil {
		metronomePropertyFilter.InValues = make([]string, len(source.InValues))
		for i := 0; i < len(source.InValues); i++ {
			metronomePropertyFilter.InValues[i] = source.InValues[i]
		}
	}
	if source.NotInValues != nil {
		metronomePropertyFilter.NotInValues = make([]string, len(source.NotInValues))
		for j := 0; j < len(source.NotInValues); j++ {
			metronomePropertyFilter.NotInValues[j] = source.NotInValues[j]
		}
	}
	return metronomePropertyFilter
}
